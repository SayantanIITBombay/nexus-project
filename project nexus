Project 1:

Simple Chatbot
Level: Easy
Project Requirements:
1.	Basic Functionality:
o	Implement a simple greeting function.
o	Respond to at least five basic questions.
o	Include a farewell message.
2.	Previous Context:
o	Implement a mechanism for remembering previous interactions.
o	Ensure the chatbot can recall and reference the conversation context.
3.	User Interaction:
o	Create a flow where the chatbot asks the user at least three questions.
o	Allow user responses and have the chatbot react accordingly.
4.	Error Handling:
o	Implement basic error handling for when the chatbot does not understand the user's input.
o	Provide friendly responses in such cases.



class SimpleChatbot:
    def __init__(self):
        self.memory = {}
        self.known_users = {}

    def greet(self):
        return "Hello! How can I help you today?"

    def farewell(self):
        return "Goodbye! Have a great day!"

    def remember(self, user_id, message):
        if user_id not in self.memory:
            self.memory[user_id] = []
        self.memory[user_id].append(message)

    def recall(self, user_id):
        return self.memory.get(user_id, [])

    def respond(self, user_id, user_input):
        responses = {
            "hi": "Hello!",
            "how are you": "I'm just a bot, but I'm doing great!",
            "what's your name": "I'm ChatBot.",
            "bye": self.farewell(),
            "what is your purpose": "I am here to help you with your queries.",
            "can you help me": "Of course! What do you need help with?",
            "what time is it": "I'm not sure, but you can check your device.",
            "tell me a joke": "Why don't scientists trust atoms? Because they make up everything!"
        }

        predefined_questions = {
            "What is your name?": f"Nice to meet you, {user_input}!",
            "How old are you?": f"{user_input} years old, got it!",
            "Where are you from?": f"{user_input} is a great place!"
        }

        if user_input.lower() in responses:
            return responses[user_input.lower()]
        elif user_id in self.known_users and len(self.known_users[user_id]) < 3:
            question = list(predefined_questions.keys())[len(self.known_users[user_id])]
            self.known_users[user_id].append(user_input)
            return predefined_questions[question]
        else:
            return "I'm sorry, I don't understand that."

    def chat(self, user_id, user_input):
        self.remember(user_id, user_input)
        if user_id not in self.known_users:
            self.known_users[user_id] = []
        return self.respond(user_id, user_input)

    def ask_questions(self):
        return [
            "What is your name?",
            "How old are you?",
            "Where are you from?"
        ]

# Example interaction
bot = SimpleChatbot()
print(bot.greet())

user_id = "user1"
questions = bot.ask_questions()
for question in questions:
    print(question)
    user_input = input()  # User provides input
    print(bot.chat(user_id, user_input))

# User asks some basic questions
print(bot.chat(user_id, "hi"))
print(bot.chat(user_id, "how are you"))
print(bot.chat(user_id, "what's your name"))
print(bot.chat(user_id, "what is your purpose"))
print(bot.chat(user_id, "can you help me"))
print(bot.chat(user_id, "what time is it"))
print(bot.chat(user_id, "tell me a joke"))

# Check memory
print("Memory of previous interactions:", bot.recall(user_id))

print(bot.farewell())








Project 2: 

Basic Q&A Bot for College Admission
Level: Medium
Project Requirements:
1.	Admission-Related Q&A:
o	Develop a chatbot for answering college admission questions.
o	Include responses about procedures, requirements, and deadlines.
2.	User Interaction:
o	Create a flow for the chatbot to engage users about their admission queries.
o	Allow multiple questions in a single session.
3.	Contextual Understanding:
o	Enhance the chatbot's ability to understand context by remembering information from previous interactions.
o	Provide more personalized responses.
4.	Connection to Backend (Optional):
o	Integrate the chatbot with a backend system for real-time admission information.
o	Ensure accurate and up-to-date responses.
5.	Error Handling and Feedback:
o	Implement robust error handling for unanswerable queries.
o	Provide helpful feedback when queries cannot be addressed.



class AdmissionChatbot:
    def __init__(self):
        self.memory = {}  # Memory to store user information
        self.responses = {
            "admission procedure": "The admission procedure involves filling out an application, submitting required documents, and attending an interview.",
            "admission requirements": "The requirements include a completed application form, transcripts, and letters of recommendation.",
            "admission deadlines": "The deadlines are typically in January for the fall semester and September for the spring semester.",
            "best college for physics": "Some of the best colleges for Physics include MIT, Harvard University, and Stanford University.",
            "tuition fees": "Tuition fees vary by institution. For example, MIT's tuition fees are approximately $53,790 per year.",
            "scholarship opportunities": "Scholarship opportunities include merit-based, need-based, and specific scholarships offered by individual colleges."
        }
        self.personal_questions = [
            "What is your intended major?",
            "What is your expected graduation year?",
            "Which colleges are you considering?"
        ]
        self.personal_info_index = 0

    def remember(self, user, key, value):
        """ Store user information in memory """
        if user not in self.memory:
            self.memory[user] = {}
        self.memory[user][key] = value

    def recall(self, user, key):
        """ Retrieve user information from memory """
        return self.memory.get(user, {}).get(key, "I don't remember our last conversation.")

    def respond(self, user, message):
        """ Generate responses based on user queries """
        message = message.lower()

        # Check if the message matches any predefined responses
        if message in self.responses:
            return self.responses[message]

        # Handle personal questions
        if self.personal_info_index < len(self.personal_questions):
            self.remember(user, self.personal_questions[self.personal_info_index], message)
            self.personal_info_index += 1
            if self.personal_info_index < len(self.personal_questions):
                return self.personal_questions[self.personal_info_index]
            else:
                return "Thank you for providing your details. How can I assist you with your college admission queries?"

        # Handle generic admission-related queries
        if "admission" in message or "college" in message:
            return "How can I assist you with your college admission queries?"

        # Default response for unrecognized queries
        return "I'm sorry, I didn't understand that. Could you please rephrase or ask something specific about admissions?"

# Example Usage:
if __name__ == "__main__":
    admission_chatbot = AdmissionChatbot()
    print("Welcome to the College Admission Q&A Bot!")

    user_name = input("Please enter your name: ")

    while True:
        user_message = input(f"{user_name}: ")

        if user_message.lower() == "bye":
            print("Chatbot: Goodbye! Have a great day!")
            break

        response = admission_chatbot.respond(user_name, user_message)
        print(f"Chatbot: {response}")

    # Example of memory usage
    print("Retrieving stored information:")
    for question in admission_chatbot.personal_questions:
        answer = admission_chatbot.recall(user_name, question)
        print(f"{question}: {answer}")
